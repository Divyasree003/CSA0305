#include <stdio.h>
#include <stdlib.h>

#define MAX 100

typedef struct {
    int src, dest, weight;
} Edge;

int parent[MAX];

// Find root of a set
int find(int i) {
    while (parent[i] != i)
        i = parent[i];
    return i;
}

// Union of two sets
void unionSet(int i, int j) {
    int a = find(i);
    int b = find(j);
    parent[a] = b;
}

// Sort edges by weight
void sortEdges(Edge edges[], int e) {
    for (int i = 0; i < e - 1; i++) {
        for (int j = 0; j < e - i - 1; j++) {
            if (edges[j].weight > edges[j + 1].weight) {
                Edge temp = edges[j];
                edges[j] = edges[j + 1];
                edges[j + 1] = temp;
            }
        }
    }
}

// Kruskalâ€™s MST
void kruskal(Edge edges[], int v, int e) {
    int total_cost = 0;

    // Initialize parent array
    for (int i = 0; i < v; i++)
        parent[i] = i;

    sortEdges(edges, e);

    printf("Edge\tWeight\n");
    for (int i = 0, count = 0; count < v - 1 && i < e; i++) {
        int u = edges[i].src;
        int v = edges[i].dest;

        if (find(u) != find(v)) {
            printf("%d - %d\t%d\n", u, v, edges[i].weight);
            total_cost += edges[i].weight;
            unionSet(u, v);
            count++;
        }
    }

    printf("Total cost of MST: %d\n", total_cost);
}

// Sample usage
int main() {
    int v = 6; // Number of vertices
    int e = 9; // Number of edges

    Edge edges[] = {
        {0, 1, 4},
        {0, 2, 4},
        {1, 2, 2},
        {1, 0, 4},
        {2, 0, 4},
        {2, 1, 2},
        {2, 3, 3},
        {2, 5, 2},
        {2, 4, 4},
        {3, 4, 3},
        {4, 5, 3}
    };

    kruskal(edges, v, 11);

    return 0;
}
