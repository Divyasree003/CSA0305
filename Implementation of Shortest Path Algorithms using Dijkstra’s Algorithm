#include <stdio.h>
#define MAX 100
#define INF 99999

void dijkstra(int graph[MAX][MAX], int n, int start) {
    int distance[MAX], visited[MAX];

    // Initialize distances and visited array
    for (int i = 0; i < n; i++) {
        distance[i] = INF;
        visited[i] = 0;
    }

    distance[start] = 0;

    for (int count = 0; count < n - 1; count++) {
        int min = INF, u;

        // Find the unvisited vertex with the smallest distance
        for (int i = 0; i < n; i++) {
            if (!visited[i] && distance[i] < min) {
                min = distance[i];
                u = i;
            }
        }

        visited[u] = 1;

        // Update distances of adjacent vertices
        for (int v = 0; v < n; v++) {
            if (!visited[v] && graph[u][v] && distance[u] + graph[u][v] < distance[v]) {
                distance[v] = distance[u] + graph[u][v];
            }
        }
    }

    // Print shortest distances
    printf("Vertex\tDistance from Source %d\n", start);
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\n", i, distance[i]);
    }
}

// Sample usage
int main() {
    int n = 6;
    int graph[MAX][MAX] = {
        {0, 4, 0, 0, 0, 0},
        {4, 0, 8, 0, 0, 0},
        {0, 8, 0, 7, 0, 4},
        {0, 0, 7, 0, 9, 14},
        {0, 0, 0, 9, 0, 10},
        {0, 0, 4, 14, 10, 0}
    };

    dijkstra(graph, n, 0);

    return 0;
}
