#include <stdio.h>
#include <stdlib.h>

#define MAX 100

// Graph node structure
typedef struct Node {
    int vertex;
    struct Node* next;
} Node;

Node* adjList[MAX];
int visited[MAX];

// Add edge to adjacency list
void addEdge(int src, int dest) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->vertex = dest;
    newNode->next = adjList[src];
    adjList[src] = newNode;
}

// DFS traversal
void dfs(int vertex) {
    visited[vertex] = 1;
    printf("%d ", vertex);

    Node* temp = adjList[vertex];
    while (temp) {
        int adj = temp->vertex;
        if (!visited[adj])
            dfs(adj);
        temp = temp->next;
    }
}

// Sample usage
int main() {
    int vertices = 6;

    // Initialize adjacency list
    for (int i = 0; i < vertices; i++)
        adjList[i] = NULL;

    // Sample graph edges
    addEdge(0, 1);
    addEdge(0, 2);
    addEdge(1, 3);
    addEdge(1, 4);
    addEdge(2, 4);
    addEdge(3, 5);
    addEdge(4, 5);

    // Initialize visited array
    for (int i = 0; i < vertices; i++)
        visited[i] = 0;

    printf("DFS Traversal: ");
    dfs(0);
    printf("\n");

    return 0;
}
